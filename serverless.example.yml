service: syonet-ogp

frameworkVersion: '3'
useDotenv: true

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  memorySize: 512
  region: us-east-1
  stage: ${opt:stage, 'development'}
  apiGateway:
    binaryMediaTypes:
      - 'image/png'
      - 'image/*'
      - '*/*'
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - s3:*
          Resource: '*'
  environment:
    HTTP_WWW_HOST: ${env:HTTP_WWW_HOST}
    NODE_ENV: ${env:ENV}

layers:
  chromeAWSLambda:
    package:
      artifact: ../chrome-aws-lambda/chrome_aws_lambda.zip

package:
  individually: true
  exclude:
    - ../chrome-aws-lambda/chrome_aws_lambda.zip
    - ../../node_modules/**

functions:
  express:
    handler: src/lambda.handler
    timeout: 900
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
    # architecture: arm64
    layers:
      - { Ref: ChromeAWSLambdaLambdaLayer }

plugins:
  - serverless-offline
  - serverless-domain-manager
  - serverless-webpack
  - serverless-s3-local

custom:
  customDomain:
    domainName: ogp.syonet.work
    certificateName: '*.syonet.work'
    hostsZoneId: Z0558522HRVC0WR5LKMZ
    certificateArn: arn:aws:acm:us-east-1:XXXXXXXX:certificate/xxxxx-xxxxx
    createRoute53Record: true
    stage: ${self:provider.stage}
    endpointType: edge
    basePath: ''
  s3:
    host: 0.0.0.0
    directory: ./local-s3
  webpack:
    webpackConfig: 'webpack.serverless.config.js'
    includeModules:
      packagePath: '../../package.json'
      forceExclude:
        - chrome-aws-lambda
        - aws-sdk
    packager: yarn
  serverless-offline:
    useChildProcesses: true
    allowCache: true
    httpPort: 4000
    websocketPort: 4001
    lambdaPort: 4002

resources:
  Resources:
    NewResource:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: syonet-eight-ogp
